/*
 * Takí Project
 *
 * IF683 Takí project
 *
 * API version: 1.0.0
 * Contact: mvgmb@cin.ufpe.br
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

type StoreMap struct {
	Map [][]interface{} `json:"map"`
}

type StoreList struct {
	Products []interface{} `json:"list"`
}

type StoreCategoriesList struct {
	Categories []interface{} `json:"list"`
}

func CategoryCategoryIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}
	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`
		SELECT _id, name, description 
		FROM categories 
		WHERE _id = %s`, vars["categoryId"])

	rows, err := db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	var c Category

	if rows.Next() {
		err = rows.Scan(&c.Id, &c.Name, &c.Description)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}
	}

	encodedImg, err := getProductEncodedImageById(vars["categoryId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	c.Image = encodedImg

	bytes, err := json.Marshal(c)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func ProductProductIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}
	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`
		SELECT _id, name, description 
		FROM products 
		WHERE _id = %s`, vars["productId"])

	rows, err := db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	var p Product

	if rows.Next() {
		err = rows.Scan(&p.Id, &p.Name, &p.Description)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}
	}

	bytes, err := json.Marshal(p)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdCategoriesGet(w http.ResponseWriter, r *http.Request) {
	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`
	SELECT DISTINCT c._id, c.name, c.description 
	FROM categories AS c, product_category AS pc 
	WHERE c._id = pc.category_id AND pc.store_id = %s`, vars["storeId"])

	rows, err := db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	var categories []Category
	var c Category

	for rows.Next() {
		err = rows.Scan(&c.Id, &c.Name, &c.Description)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}

		encodedImg, err := getProductEncodedImageById(strconv.Itoa(int(c.Id)))
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}
		c.Image = encodedImg

		categories = append(categories, c)
	}

	bytes, err := json.Marshal(categories)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdCategorylistCategoryListIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`DELETE FROM category_lists WHERE _id = '%s'`, vars["categoryListId"])

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func StoreStoreIdCategorylistCategoryListIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	categoryList, err := getCategoryList(vars["categoryListId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	fmt.Println(categoryList)

	bytes, err := json.Marshal(*categoryList)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdCategorylistCategoryListIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	categoryList, err := parseCategoryList(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)
	categoryListJSON, err := json.Marshal(categoryList.Categories)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	stmt := fmt.Sprintf(`
	UPDATE category_lists
	SET name = '%s', list = '%s'
	WHERE _id = '%s'`, categoryList.Name, string(categoryListJSON), vars["categoryListId"])

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func StoreStoreIdCategorylistCategoryListIdRouteGet(w http.ResponseWriter, r *http.Request) {
	// Front will do it
}

func StoreStoreIdListListIdDelete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`DELETE FROM lists WHERE _id = %s`, vars["listId"])

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	stmt = fmt.Sprintf(`DELETE FROM user_lists WHERE list_id = %s`, vars["listId"])

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func StoreStoreIdListListIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	list, err := getList(vars["listId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	bytes, err := json.Marshal(*list)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdListListIdPut(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	list, err := parseList(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)
	list_json, err := json.Marshal(list.Products)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	stmt := fmt.Sprintf(`
	UPDATE lists
	SET name = '%s', list = '%s'
	WHERE _id = '%s'`, list.Name, string(list_json), vars["listId"])

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
}

func StoreStoreIdListListIdRouteGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	route, err := mapRoute(vars["storeId"], vars["listId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	json_route, err := json.Marshal(route)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(json_route)
}

func StoreStoreIdListNewPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	list, err := parseList(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	list_json, _ := json.Marshal(list.Products)

	stmt := fmt.Sprintf(`
	INSERT INTO lists (name, list) 
	VALUES ('%s', '%s')`, list.Name, string(list_json))

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	user, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt_1 := fmt.Sprintf(`
	INSERT INTO user_lists(USER_ID, LIST_ID, STORE_ID)
	VALUES(%d, (SELECT MAX(_id) FROM lists), %s)`, user.Id, vars["storeId"])

	_, err = db.Query(stmt_1)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)

}

func StoreStoreIdListsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	user, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`
	SELECT _id, name
	FROM lists
	WHERE _id = ANY ( 
		SELECT list_id 
		FROM user_lists 
		WHERE user_id = %d AND store_id = %s
	)`, user.Id, vars["storeId"])

	rows, err := db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	type tempList struct {
		ListID   string `json:"list_id"`
		ListName string `json:"list_name"`
	}

	lists := []tempList{}

	for rows.Next() {
		var row tempList
		err = rows.Scan(&row.ListID, &row.ListName)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}

		lists = append(lists, row)
	}

	bytes, err := json.Marshal(lists)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdMapGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	stmt := fmt.Sprintf(`
	SELECT map
	FROM stores 
	WHERE _id = %s`, vars["storeId"])

	rows, err := db.Query(stmt)
	if err != nil {
		log.Println(err)
	}

	var storeMap string

	if rows.Next() {
		err = rows.Scan(&storeMap)
		if err != nil {
			log.Println(err)
		}
	}

	bytes, err := json.Marshal(storeMap)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdProductsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	// vars := mux.Vars(r)

	// stmt := fmt.Sprintf(`
	// SELECT p._id, p.name, p.description
	// FROM products AS p, product_category AS pc
	// WHERE p._id = pc.product_id AND pc.store_id = %s`, vars["storeId"])

	// rows, err := db.Query(stmt)
	// if err != nil {
	// 	w.WriteHeader(http.StatusBadRequest)
	// 	log.Println(err)
	// 	return
	// }

	// var products []Product
	// var p Product

	// for rows.Next() {
	// 	err = rows.Scan(&p.Id, &p.Name, &p.Description)
	// 	if err != nil {
	// 		w.WriteHeader(http.StatusBadRequest)
	// 		log.Println(err)
	// 		return
	// 	}
	// 	products = append(products, p)
	// }

	brancoJSON := `{
		itens: [
		  {
			nome: 'Descartáveis',
			id: 9,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Biscoito',
			id: 12,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Bebidas',
			id: 13,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Ovos',
			id: 14,
			idImagem: 2,
			idCategoria: 2,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Hortifruti',
			id: 15,
			idImagem: 2,
			idCategoria: 5,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Padaria',
			id: 16,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Leite e Achocolatado',
			id: 17,
			idImagem: 2,
			idCategoria: 6,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Doces e Bolos',
			id: 18,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Frutas',
			id: 19,
			idImagem: 2,
			idCategoria: 5,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Enlatados',
			id: 22,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Massas',
			id: 23,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Condimentos',
			id: 24,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Fraldas',
			id: 26,
			idImagem: 2,
			idCategoria: 4,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Perfumaria',
			id: 27,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Verduras',
			id: 28,
			idImagem: 2,
			idCategoria: 5,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Limpeza',
			id: 29,
			idImagem: 2,
			idCategoria: 3,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Pets',
			id: 31,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Grãos',
			id: 32,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Frango',
			id: 33,
			idImagem: 2,
			idCategoria: 2,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Carne',
			id: 34,
			idImagem: 2,
			idCategoria: 2,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Peixe',
			id: 35,
			idImagem: 2,
			idCategoria: 2,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Congelado',
			id: 36,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Sorvete',
			id: 37,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Laticinios',
			id: 38,
			idImagem: 2,
			idCategoria: 6,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Frios',
			id: 39,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Frigorífico',
			id: 40,
			idImagem: 2,
			idCategoria: 2,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Sabonete',
			id: 43,
			idImagem: 2,
			idCategoria: 4,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Ofertas',
			id: 44,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Aveia',
			id: 45,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Bolacha',
			id: 46,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Cozinha',
			id: 47,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Sandalia',
			id: 48,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Cuscuz e Milho',
			id: 49,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Beleza',
			id: 50,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Margarinas e Manteigas',
			id: 51,
			idImagem: 2,
			idCategoria: 6,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Pré Prontos',
			id: 52,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Arroz, Farinha e Açúcar',
			id: 53,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Café',
			id: 54,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Sucos',
			id: 55,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Salgadinhos',
			id: 56,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Vinagre',
			id: 57,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Dieta',
			id: 58,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Chá',
			id: 59,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Veneno',
			id: 60,
			idImagem: 2,
			idCategoria: 3,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Talheres',
			id: 61,
			idImagem: 2,
			idCategoria: 1,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Absorventes',
			id: 62,
			idImagem: 2,
			idCategoria: 4,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Papel Higiênico',
			id: 63,
			idImagem: 2,
			idCategoria: 4,
			selected: false,
			confirmed: false
		  },
		  {
			nome: 'Higiene Bucal',
			id: 64,
			idImagem: 2,
			idCategoria: 4,
			selected: false,
			confirmed: false
		  }
		],
		totalSelected: 0
	  }`

	bytes, err := json.Marshal(brancoJSON)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoreStoreIdSearchCategoriesInputGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	vars := mux.Vars(r)

	possibleCategories, err := GetPossibleStoreCategoriesFromProductName(vars["input"], vars["storeId"])
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	bytes, err := json.Marshal(possibleCategories)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func StoresGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	_, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	stmt := fmt.Sprintf(`
	SELECT _id, name
	FROM stores`)

	rows, err := db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	var stores []Store

	for rows.Next() {
		var store Store
		err = rows.Scan(&store.Id, &store.Name)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			log.Println(err)
			return
		}

		stores = append(stores, store)
	}

	bytes, err := json.Marshal(stores)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)

}

func UserGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	user, err := checkAuthentication(r)
	if err != nil {
		w.WriteHeader(http.StatusUnauthorized)
		log.Println(err)
		return
	}

	bytes, err := json.Marshal(user)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write(bytes)
}

func UserNewPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")

	user, err := parseUser(r)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	stmt := fmt.Sprintf(`
	INSERT INTO users (name, email, birthday, sex, permission) 
	VALUES ('%s', '%s', '%s', %d, '%s')`, user.Name, user.Email, user.Birthday, user.Sex, user.Permission)

	_, err = db.Query(stmt)
	if err != nil {
		w.WriteHeader(http.StatusBadRequest)
		log.Println(err)
		return
	}

	w.WriteHeader(http.StatusOK)
}
